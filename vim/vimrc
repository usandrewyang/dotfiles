"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
"                                                                              "
"                       __   _ _ _ __ ___  _ __ ___                            "
"                       \ \ / / | '_ ` _ \| '__/ __|                           "
"                        \ V /| | | | | | | | | (__                            "
"                         \_/ |_|_| |_| |_|_|  \___|                           "
"                                                                              "
"                                                                              "
"         _____    _______  ________ _______________________      __           "
"        /  _  \   \      \ \______ \\______   \_   _____/  \    /  \          "
"       /  /_\  \  /   |   \ |    |  \|       _/|    __)_\   \/\/   /          "
"      /    |    \/    |    \|    `   \    |   \|        \\        /           "
"      \____|__  /\____|__  /_______  /____|_  /_______  / \__/\  /            "
"              \/         \/        \/       \/        \/       \/             "
"                                                                              "
"                                                                              "
"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"

" Don't try to be vi compatible
set nocompatible

set noswapfile

set pastetoggle=<F3>

set mouse=a
"
" Bootstrap for plugin manager
" automatically install Vundle if vim-plug not found
"
if empty(glob('~/.vim/bundle/Vundle.vim'))
  silent !git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle plugin manager
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set the runtime path to include Vundle and initialize
"
" TODO: Vundle won't bootstrap itself. It is required to download it first
"
"
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
"
"
" Helps force plugins to load correctly when it is turned back on below
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'

" colorscheme
Plugin 'ghifarit53/tokyonight-vim'
Plugin 'morhetz/gruvbox'

"Plugin 'sheerun/vim-polyglot'

"Plugin 'ctrlpvim/ctrlp.vim'

Plugin 'ojroques/vim-oscyank'

Plugin 'tpope/vim-commentary'

Plugin 'junegunn/fzf'
Plugin 'mhinz/vim-startify'
Plugin 'ap/vim-buftabline'
Plugin 'tpope/vim-vinegar'
" Plugin 'justinmk/vim-dirvish'

call vundle#end()            " required

" Turn on syntax highlighting
syntax on

" For plugins to load correctly
filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" End of Vundle plugin manager
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Pick a leader key
let mapleader = "\<space>"
set notimeout ttimeout

" Security
set modelines=0

" Show line numbers
set number

" Show file stats
set ruler

" No annoying sound on errors
set noerrorbells
set novisualbell
set vb t_vb=
set tm=500

" Encoding
set encoding=utf-8

" Whitespace
set wrap
set textwidth=79
set formatoptions=tcqrn1
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set noshiftround

" Cursor motion
set scrolloff=3
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs
runtime! macros/matchit.vim

" Move up/down editor lines
nnoremap j gj
nnoremap k gk

" Allow hidden buffers
set hidden

" Rendering
set ttyfast

" Status bar
set laststatus=2

" Last line
set showmode
set showcmd

" highlight setups
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
map <leader><space> :let @/=''<cr> " clear search

" Textmate holdouts

" Formatting
map <leader>q gqip

" Visualize tabs and newlines
set listchars=tab:▸\ ,eol:¬
" Uncomment this to enable by default: set list " To enable by default Or use
" your leader key + l to toggle on/off
map <leader>l :set list!<CR> " Toggle tabs and EOL

" Color scheme (terminal)
set t_Co=256
set background=dark

" TODO:tokoyo moonlight does not work!
if has('termguicolors')
  set termguicolors
endif
"
colorscheme gruvbox
"colorscheme tokyonight
"let g:tokyonight_style = 'night' " available: night, storm
"let g:tokyonight_enable_italic = 1


" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

if has("autocmd")
    autocmd BufWritePre *.txt,*.py,*.sh,*.c,*h,*.cpp, :call CleanExtraSpaces()
endif

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope setup
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    " hide msg when adding cscope database at start
    set nocscopeverbose

    " Find and add a cscope file. Either from CSCOPE_DB or by searching for it
    " recursively starting in the CWD and going up to /
    if $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    else
        " Get all parts of our current path
        let dirs = split($PWD, '/')
        " Start building a list of paths in which to look for cscope.out
        let paths = ['/']
        " /foo/bar/baz would result in the `paths` array containing:
        " [/ /foo /foo/bar /foo/bar/baz]
        for d in dirs
            let paths = add(paths, paths[len(paths) - 1] . d . '/')
        endfor

        " List is backwards search order, so reverse it.
        for d in reverse(paths)
            let cscope_file = d . "cscope.out"
            if filereadable(cscope_file)
                execute('cs add ' . cscope_file)
                break
            endif
        endfor
    endif

    " show msg when any other cscope db added
    set cscopeverbose

    " set minimal key maps
    "nmap <leader>cf :cs find f<space>
    nmap <leader>cg :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>cs :cs find s <C-R>=expand("<cword>")<CR><CR>

endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" End of cscope setup
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Highligth the current line 
set cursorline
hi cursorline cterm=none term=none
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
highlight CursorLine guibg=Black ctermbg=Black

" Key maps for edit .vimrc
nnoremap <leader>ve :e $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

map <leader>x :bd <CR>
map <F9> :bprev <CR>
map <F10> :bnext <CR>

" map macro q to <leader>q
noremap <leader>q q

nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
nmap q :q<CR>

nmap <leader>y <Plug>OSCYankOperator
nmap <leader>yy <leader>y_
vmap <leader>y <Plug>OSCYankVisual


nmap <leader>f :FZF<CR>
"------------------------------------------------------------
" Yank file name or path to clipboard
" register +/* does not work. Make use of reg 0 as a walk-around

"" relative path (src/foo.txt)
nnoremap <leader>cf :let @0=expand("%") \| OSCYankRegister 0<CR>
"
"" absolute path (/something/src/foo.txt)
nnoremap <leader>cF :let @0=expand("%:p") \| OSCYankRegister 0<CR>
"
"" filename (foo.txt)
nnoremap <leader>ct :let @0=expand("%:t") \| OSCYankRegister 0<CR>
"
"" directory name (/something/src)
nnoremap <leader>cp :let @0=expand("%:p:h") \| OSCYankRegister 0<CR>
"------------------------------------------------------------

" key maps for comment for line & block
" plugin is required
vmap <leader>/ gc
nmap <leader>/ gcc

inoremap ;; <ESC>A;<ESC>

